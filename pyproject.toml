#:schema None
##:schema https://json.schemastore.org/pyproject.json

[project]
name = "archivepodcast"
version = "1.1.6"
description = ""
authors = [{ name = "Kieran Gee", email = "kieran.lost.the.game@gmail.com" }]
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
    "boto3>=1.35,<2",
    "colorama>=0.4.6",
    "flask>=3.0, <4",
    "jinja2>=3.1, <4",
    "lxml>=5.3.0",
    "requests>=2.32",
    "tomlkit>=0.13",
    "typed-ffmpeg>=2.1",
    "waitress>=3.0",
]

[dependency-groups]
dev = ["pylance"]

type = [
    "mypy",
    "types-colorama",
    "types-lxml",
    "types-requests",
    "boto3-stubs[s3]",
    "pydub-stubs",
]

lint = ["ruff"]

test = [
    "pytest",
    "pytest-cov",
    "pytest-mock",
    "pytest-random-order",
    "detect-test-pollution",
    "moto[s3]",
    "requests-mock",
    "python-magic",
]

[tool.uv]
default-groups = ["dev", "test", "type", "lint"]

[tool.ruff]
cache-dir = "~/.cache/ruff"
target-version = "py311"
line-length = 120

[tool.ruff.lint]
extend-fixable = ["B", "I001"] # KG I think this means something...
extend-unsafe-fixes = [
    "F401",
] # KG I don't like that this is fixed automatically (this doesn't work?)
select = ["ALL"] # KG Include absolutely all of Ruff's rules.
ignore = [
    # Modules
    "DJ",  # KG Django not required
    "PTH", # KG builtin 'open' is fine, not going to use pathlib
    "DTZ", # KG no need to specify timezone for time objects

    # Specific rules
    # "ANN101", # KG Why define self type for object functions...
    "TD002",  # KG Verbose TODO, only I work on this project
    "TD003",  # KG Verbose TODO, only I work on this project
    "ISC001", # KG conflict in the formatter
    "COM812", # KG conflict in the formatter
    "G004",   # KG I log with f-strings
    "S320",   # KG Word on the street says that lxml is safe
]

[tool.ruff.lint.per-file-ignores]
"tests/*.py" = [
    # Modules
    "ARG", # KG Unused function args -> fixtures nevertheless are functionally relevant
    "FBT", # KG Don't care about booleans as positional arguments in tests, e.g. via @pytest.mark.parametrize()

    # Specific rules
    "S101",    # KG asserts allowed in tests.
    "ANN201",  # KG Not really needed for pytest.
    "SLF001",  # KG Accessing private members is needed for testing.
    "INP001",  # KG __init__.py not needed for PyTest.
    "PT004",   # KG monkeypatch doesn't return.
    "ANN001",  # KG Tests don't need type hints.
    "ANN002",  # KG args/kwargs don't need type hints.
    "ANN003",  # KG args/kwargs don't need type hints.
    "S311",    # KG I'll assume no real crypto will be done in PyTest.
    "S105",    # KG Hardcoded fake passwords are fine in tests.
    "PLR0913", # KG Tests can have as many arguments as they want.
]


[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
docstring-code-format = true
docstring-code-line-length = 40

[tool.pytest.ini_options]
addopts = [
    "--cov-context=test",
    "--cov=archivepodcast",
    "--cov-report=term",
    "--cov-report=html",
]
testpaths = ["tests"]
filterwarnings = [
    "ignore::DeprecationWarning:boto.*",
    "ignore::pytest.PytestUnhandledThreadExceptionWarning", # God knows
]


[tool.coverage.html]
show_contexts = true

[tool.mypy]
files = ["archivepodcast", "tests"]
namespace_packages = true
explicit_package_bases = true
show_error_codes = true
strict = false
enable_error_code = [
    "ignore-without-code",
    "redundant-expr",
    "truthy-bool",
    "type-arg",
]
