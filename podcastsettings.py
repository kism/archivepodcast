"""Get settings for archivepodcast"""

import logging
import json
import platform
import os

# A default settings config to be written to the file system if none exists at the expected path
DEFAULTJSON = """
{
    "webpagetitle": "Podcast Archive",
    "webpagedescription": "Podcast archive, generated by archivepodcast.py available at https://github.com/kism/archivepodcast",
    "webpagepodcastguidelink": "https://medium.com/@joshmuccio/how-to-manually-add-a-rss-feed-to-your-podcast-app-on-desktop-ios-android-478d197a3770",
    "inetpath": "http://localhost:5000/",
    "webroot": "output/",
    "podcast": [
        {
            "podcasturl": "",
            "podcastnewname": "",
            "podcastnameoneword": "",
            "podcastdescription": "",
            "live": true,
            "contactemail": ""
        }
    ]
}
"""

def get_settings(args):
    """Load settings from settings.json"""
    logging.info("Loading settings file")

    settingserror = False
    settingsjson = None
    settingspath = ""
    err = "no error defined?"

    if args.settingspath:
        settingspath = args.settingspath
    else:
        settingspath = "settings.json"

    logging.info("Path: %s", str(settingspath))

    try:
        settingsjsonfile = open(settingspath, "r", encoding="utf-8")
    except FileNotFoundError as exc:  # If no settings.json, create it
        err = (
            "Settings json doesnt exist at: %s. Creating empty config, please fill it out.",
            settingspath,
        )
        logging.error(err)
        settingsjsonfile = open(settingspath, "w", encoding="utf-8")
        settingsjsonfile.write(DEFAULTJSON)
        settingsjsonfile.close()
        settingsjsonfile = open(settingspath, "r", encoding="utf-8")
        raise FileNotFoundError(err) from exc

    try:
        settingsjson = json.loads(settingsjsonfile.read())
    except ValueError as exc:
        err = "Malformed json in settings.json, check the syntax"
        logging.error(err)
        raise ValueError(err) from exc

    settingsjsonfile.close()

    try:
        # Iterate through the first level default settings json in this file,
        # if any of the keys arent in settings.json throw an error
        for setting in json.loads(DEFAULTJSON).keys():
            if settingsjson[setting] == "":
                err = ("Setting: %s not set", setting)
                logging.error(err)
                raise ValueError(err)
    except KeyError as exc:
        err = (
            "Looks like settings json doesnt match the expecting schema format, "
            "make a backup, remove the original file, run the script again "
            "and have a look at the default settings.json file"
        )
        logging.error(err)
        raise KeyError(err) from exc

    if platform != "win32":
        if settingsjson["webroot"][-1] != "/":
            settingsjson["webroot"] = settingsjson["webroot"] + "/"
    else:
        if settingsjson["webroot"][-1] != "\\":
            logging.warning("I never tested this on windows")
            settingsjson["webroot"] = settingsjson["webroot"] + "\\"

    try:
        for idx, podcast in enumerate(settingsjson["podcast"]):
            logging.debug("Podcast entry: %s", str(podcast))
            try:
                if podcast["podcasturl"] == "" and podcast["live"] is False:
                    logging.error(
                        '"podcasturl"         not defined in podcast entry %s',
                        str(idx + 1),
                    )
                    settingserror = True
                if podcast["podcastnameoneword"] == "":
                    logging.error(
                        '"podcastnameoneword" not defined in podcast entry %s',
                        str(idx + 1),
                    )
                    settingserror = True
                if podcast["live"] == "":  # is this logic cooked?
                    logging.error(
                        '"live" not defined in podcast entry %s', str(idx + 1)
                    )
                    settingserror = True
            except ValueError:
                logging.error(
                    "Issue with podcast entry in settings json: %s", str(podcast)
                )
                settingserror = True
    except KeyError:
        settingserror = True

    if settingserror:
        err = "Invalid config, exiting, check " + settingspath
        logging.error(err)
        raise ValueError(str(err))


    # Help the user a bit if they make innocent mistakes
    if settingsjson['inetpath'][-1] != '/':
        settingsjson['inetpath'] += '/'

    if settingsjson['webroot'][-1] != os.sep:
        settingsjson['webroot'] += os.sep

    return settingsjson
